#include <iostream>
using namespace std;

int main() {
  pair<int,string> p;
//   p=make_pair(2,"abc");
    //  p={2,"abcd"};
//   cout<<p.first<<" "<<p.second<<endl;
//   We can also copy our pair but eith time complexity o(n)
    // pair<int,string> p1=p;
    // p1.first=7;
    // cout<<p.first<<" "<<p.second<<endl;
    // We can also pass the pair by refrence with time complexity o(1)
    // pair<int,string> &p1=p;
    // p1.first=7;
    // cout<<p.first<<" "<<p.second<<endl;
    // int a[]={1,2,3};
    // int b[]={2,3,4};
    // pair<int,int> p_array[3];
    // p_array[0]={1,2};
    // p_array[1]={2,3};
    // p_array[2]={3,4};
    // swap(p_array[0],p_array[2]);
    // for(int i=0;i<3;i++){
    //     cout<<p_array[i].first<<" "<<p_array[i].second<<endl;
    // }
    // cin>>p.first;
    // cout<<p.first;
    
    // We generally use STL with vector 

//     return 0;
// }





// Online C++  compiler to run C++ program online
// #include <iostream>
// #include<bits/stdc++.h>
// using namespace std;
// v.size() timecomplexity is 0(1))
// void printvec(vector<int> v){
    // cout<<"Size of: "<<v.size()<<endl;
//     for(int i=0;i<v.size();i++){
//         cout<<v[i]<<" ";
//     }
//     cout<<endl;
// }
// int main() {
    // vector<int> v;
    // // vector<pair<int,int>> v;
    // int n;
    // cin>>n;
    // for(int i=0;i<n;i++){
    //     int x;
    //     cin>>x;
    //     // push_back and pop_back time complexity is o(1)
    //     v.push_back(x);
    // }
    // 5 zero will get initialisied
    // vector<int> v(10);
    // first 12 size will get filled with 3
    // vector<int> v(12,3);
    // v.push_back(12);
    // v.push_back(18);
    // v.pop_back();
    // printvec(v);
    // we can copy our vector too with 0(n)  time comlexity expensive so by reference send
    //   vector<int> v1=v;
    //   v1.push_back(122);
    //     printvec(v);
    //      printvec(v1);
        //  we can reference our vector too with 0(1)  time comlexity
    //   vector<int> &v1=v;
    //   v1.push_back(122);
    //      printvec(v);
    //      printvec(v1);
    
    // vector<string> ans;
    // return 0;
// }







#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int main() {
    // Range Based loops something which is used in almost all STL directly elemnt gets sored in value
    vector<int> v={1,2,3,4,5};
    for(int value : v){
        // Here the values which are coming is copy of v not actual one
        value++;
    }
    
    for(int value : v){
        // Here the values which are coming is copy of v not actual one
        cout<<value<<" ";
    }
    for(int &value : v){
        // Here the values which are coming is copy of v not actual one
       value++;
    }
    for(int &value : v){
        // Here the values which are coming is not copy actual value by reference of v not actual one
        cout<<value<<" ";
    }
    cout<<endl;
    vector<pair<int,int>> v_p={{1,2},{3,4}};
    for(pair<int,int> &value: v_p){
        cout<<value.first<<" "<<value.second<<endl;
    }
    for(auto &value: v_p){
        cout<<value.first<<" "<<value.second<<endl;
    }
    // Auto Keyword dynamically detect the datatypes of any elemnt
    auto a=1;
    // lamba sa vector wala ko short kar dega code chhote hojainge
    cout<<a<<endl;
    return 0;
}


// #include<bits/stdc++.h>
// using namespace std;
// void printvector(vector<pair<int,int>> v){
//     for(int i=0;i<v.size();i++){
//         cout<<v[i].first<<" "<<v[i].second<<endl;
//     }
//     cout<<endl;
// }
// void Printvector(vector<int> v){
//     for(int i=0;i<v.size();i++){
//         cout<<v[i]<<endl;
//     }
//     cout<<endl;
// }
// int main(){
    // vector<pair<int,int>> v={{1,2},{3,4},{5,6}};
    // printvector(v);
    // vector of pair
    //   vector<pair<int,int>> v;
    //   int n;
    //   cin>>n;
    //   for(int i=0;i<n;i++){
    //       int x,y;
    //       cin>>x>>y;
    //   u can also use make_pair
    //       v.push_back({x,y});
    //   }
    // Behaving like a 2-D Array 
    // int N;
    // cin>>N;
    // vector<int> v[N];
    // // Here nu of column is dynamic
    // for(int i=0;i<N;i++){
    //     int n;
    //     cin>>n;
    //     for(int j=0;j<n;j++){
    //         int x;
    //         cin>>x;
    //         v[i].push_back(x);
    //     }
    // }
    // for(int i=0;i<N;i++){
    //     Printvector(v[i]);
    // }
    // cout<<v[0][1];
    // If we want row to be dynamic
    // vector<vector<int>> v;
    // for(int i=0;i<N;i++){
    //     int n;
    //     cin>>n;
    //     vector<int> temp;
    //   for(int j=0;j<n;j++){
    //       int x;
    //       cin>>x;
    //       temp.push_back(x);
    //   }
    //   v.push_back(temp);
    //   }
    //   for(int i=0;i<v.size();i++){
    //     Printvector(v[i]);
    // }
    // }
        
    // } 
//       printvector(v);
// }





#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int main() {
    vector<int> v={1,2,3,4,5};
    // vector<int> ::iterator it=v.begin();
    // cout<<(*(it))<<endl;
    // cout<<(*(it+1))<<endl;
    // for(it=v.begin();it!=v.end();it++){
    //     cout<<(*it)<<endl;
        
    // }
    cout<<endl;
    vector<pair<int,int>> v_p={{1,2},{2,3},{3,4}};
    vector<pair<int,int>> :: iterator it;
    for(it=v_p.begin();it!=v_p.end();it++){
        cout<<(*it).first<<" "<<(*it).second<<endl;
        cout<<it->first<<" "<<it->second<<endl;
        
    }
    cout<<endl;
//  (*it).first<=> (it->first)
    return 0;
}







